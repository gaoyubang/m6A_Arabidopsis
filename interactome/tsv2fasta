#!/usr/bin/perl

use warnings;
use strict;
use Archive::Tar;

my $fh;

# Store uniprot sequences into hash
my %fasta = ();
my $seq = "";
my $header = "";
my $tar = Archive::Tar -> new();
$tar->read("../proteinSeq/uniprot/uniprot_sprot.fasta.tar.gz");
foreach my $file ($tar -> list_files) {
    my @data = split("\n", $tar -> get_content($file));
    foreach my $line (@data) {
	if ($line =~ /^>/) {
	    $fasta{$header} = $seq if ($seq);
	    $header = (split("\\|", $line))[1];
	    $seq = "";
	}         
	else {    
	    $line =~ s/\s+//g;
	    $seq .= $line;
	}
    }
    if ($seq) { # handle last sequence
	$fasta{$header} = $seq;
    }    
}

my @fn = ("ss_candidates.tsv", "proteome.tsv");
for (my $i = 0; $i < scalar(@fn); $i++) {
    open($fh, $fn[$i]) or die(sprintf("[ERROR] Could not find file %s\n", $fn[$i]));
    my $fnOut = $fn[$i];
    $fnOut =~ s/tsv/fa/g;
    open(my $fhOut, ">", $fnOut);
    while (my $line = <$fh>) {
	chomp($line);
	if ($line !~ /Majority/) {
	    my @arr = split("\t", $line);
	    my @ids = split(";", $arr[2]);
	    for (my $i=0; $i < scalar(@ids); $i++) {
		if (exists($fasta{$ids[$i]})) {
		    printf($fhOut ">%s\n", $ids[$i]);
		    printf($fhOut "%s\n", $fasta{$ids[$i]});
		    last;
		}
		if ($i == scalar(@ids) - 1) {
		    printf("[WARNING] No entry found for %s\n", join(";", @ids));
		}
	    }
	}
    }
    close($fh);
    close($fhOut);
}

